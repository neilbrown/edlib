
 This file list some the calls that are recognised by various panes.

# Misc

## view:changed

This is sent to a focus pane when a change happens that will affect
this particular view of a document.  This is often a change in highlights,
such as a selection.

If both mark and mark2 are given, the change reported is only between
the marks.  If neither mark is given, the entire view is suspect.
If only one mark is given, then the change is small and either starts
at 'mark' or ends at 'mark2'.  'num' gives the length in characters,
but if this length extends to another line, it may not be honoured.


# Documents

## doc:request:FOO

Request that when the document sends notification "FOO", it gets sent
to the provided focus.

## doc:notify:FOO

Request that the document sends notification FOO.

# Editor

## editor:request:FOO

Request to received notification for FOO send on the editor.

## editor:notify:FOO

Send notification "FOO" from the editor.

Known notifications include:

- all-displays.  This is sent to all displays.  The callback will
  contain a timestamp for the most recent event in 'num'.  The number
  of times the callback is called indicates how many displays there are.


# Window/input

## window:request:FOO

Ask to receive notification "FOO" send to current window.

## window:notify:FOO

Send notification "FOO" to current window.

Known notifications include:

- Keystroke-notify - string is the key name
- Mouse-event-notify - string is the event name

# Displays

A display pane provides linkage to keyboard/pointer input, and visual output.
It will generate Keystroke and Mouse-event events for its parent, and expect
various Draw: event from children.

A display pane should register against the root, and will typically be
re-parented over an "input handler" pane, and have a stack of other
panes on top.  If the display supports scaling, it should set an
attributes "scale:M" with value "WxH" where "W" is pixel-width of 'M' in
default font, and "H" is pixel-height of a line.

## Draw:clear

Draw:clear will allocate a display image for the focus pane and clear
it.  "str1" can be attributes for the background, typically a background
colour such as "bg:cyan".  If no attributes are given and there is
another pane closer to the root which has been cleared, the appropriate
section of the image for that pane is copied it the image for 'focus'.
If ther is no image to copy from, the pane is cleared to "bg:white".

## Draw:text

This requests that text be drawn on the display.  If text already exists
at the same location it may be replaced or it may be blended.

- str1 is the text to draw.  Control characters should be avoided.
- (x,y) gives the position for the top-left corner of the text
- str2 is attributes to apply to the text
- num, if non-negative, is a byte offset in str1 where a cursor should
  be placed.  The character following str1+num will be highlighted to
  indicate that presence of the cursor before it.  If num is the length
  of str1, then a cursor-on-space will appear after the drawn text.
- num2 is a scale to apply to the text.  1000 is the default (used if
  num2==0)  It is roughly "pixels per point * 1000"

## Draw:text-size

This request measures the size of 'str1'.  The result is returned using
comm2 as the (x,y) pair.

- str1 is the string to measure
- str2 is the attributes
- num, if non-negative, is a pixel offset to the right of the left edge
  The byte-position in the resulting image which would be drawn at the
  offset is reported
- num2 is a scale, as with Draw:text
- comm2 is called with the results of the measurement:
    - num is the byte offset corresponding to the requested pixel offset
    - num2 is the "ascent" for the text - pixel distance from baseline
      to top. This is typically used to determine where the "Top" left
      of the image should go when calling Draw:text
    - (x,y) is the width and height of the drawing of the text.

## Draw:image

Draw an image on the pane (or ancestor which as been cleared).

- str1 identifies the images, either "file:FILENAME" or "comm:COMMAND".
  If "comm:" the command is run and result should be returned as 'bytes'
  (comm2 called with ->str1 as array of bytes, ->num1 as length).
- str2 contains 'mode' information.
      - By default the image is placed centrally in the pane
        and scaled to use either fully height or fully width.
      - Various letters modify this:
	    'S' - stretch to use full height *and* full width
	    'L' - place on left if full width isn't used
	    'R' - place on right if full width isn't used
	    'T' - place at top if full height isn't used
	    'B' - place at bottom if full height isn't used.
        Also a suffix ":NNxNN" will be parse and the two numbers used
        to give number of rows and cols to overlay on the image for
        the purpose of cursor positioning.  If these are present and
        p->cx,cy are not negative, draw a cursor at p->cx,cy highlighting
        the relevant cell.
- num, num2 if both positive, give width and height to scale to, 
       over-riding the default scaling.
       If only num is positive, then it is a scale factor *1024
       to be applied to the image.
- x,y give a top-left pixel in the scaled image to display.  Only
      this pixel and those to right and below might be shown.
      Negative values allow a margin between pane edge and this image.

## all-displays

Display should request notifications of "all-displays" from the editor
("editor:request:all-displays").  When a notification comes it should
reply (via comm2) with num1 being the time in seconds of the last
interaction with the user.  This allows the "most recently active"
display to be deteremined.

When a close request is sent to the display, it should call
"editor:notify:all-displays" and if the num of reply is 1 (presumably
from this display), it should generally refuse, as closing the last
display can be awkward.

## window:close

This is a request for the display to close - may be rejected if it is
the only display left.

## window:set:ATTR

Set any attribute on the display pane.  

The attribute "no-close" affects closing.  If a window:close request
arrives when "no-close" attribute is a non-empty string, that string
should be reported via a message, and the close should be rejected.

## window:external-viewer

str1 is a filename and str2 is (optionally) a basename template
containing "XXXXXX".  An external viewer (typically xdg-open) should be
run on the file.  If the display is on a different host to where the
file is stored, some action might be taken to copy it and provide a
local names, based on str2.

## window:fullscreen

If num1 > 0, display should switch to full-screen mode if possible.
If num1 <= 0, display should switch away from full-screen mode.

## window:new

If it is possible to duplicate the display (e.g.  similar window on same
output), do that.

